float random(int x, int y) {

	//srand(time(NULL));
	//return (rand() % 32768) / 32768.0;
	
	//
	int n = x + y * 57;
	n = (n << 13) ^ n;
	int t = (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff;
	return 1.0 - double(t) * 0.931322574615478515625e-9;/// 1073741824.0);
}


float smooth(float x, float y) {

	float corners = (random(x - 1, y - 1) + random(x + 1, y - 1) + random(x - 1, y + 1) + random(x + 1, y + 1)) / 16;
	float sides = (random(x - 1, y) + random(x + 1, y) + random(x, y - 1) + random(x, y + 1)) / 8;
	float center = random(x, y) / 4;
	return corners + sides + center;
}

float interpolate(float a, float b, float x) {

	return a*(1 - x) + b*x;
}


float noise(float x, float y) {


	float	fractional_X = x - int(x);
	float 	fractional_Y = y - int(y);
	//float 	fractional_Z = z - int(z);

	//smooths
	float v1 = smooth(int(x), int(y));
	float v2 = smooth(int(x) + 1, int(y));
	float v3 = smooth(int(x), int(y) + 1);
	float v4 = smooth(int(x) + 1, int(y) + 1);

	// interpolates
	float i1 = interpolate(v1, v2, fractional_X);
	float i2 = interpolate(v3, v4, fractional_X);

	float final = interpolate(i1, i2, fractional_Y);

	return final;
}

float totalNoisePerPoint(int x, int y) {

	int octaves = 7;
	float zoom = 20.0f;
	float persistance = 0.5f;

	float total = 0.0f;

	for (int i = 0; i < octaves - 1; i++) {

		float frequency = pow(2, i)/zoom;
		float amplitude = pow(persistance, i);

		total += noise(x * frequency, y * frequency) * amplitude;
	}

	return total;

}


///////////////////////////////////////
// save image into byte array
///////////////////////////////////////

const int width = 800, height = 600;
GLubyte * perlinData = (GLubyte*)malloc(sizeof(int) * width * height * 3);


void perlinNoise() {

	srand(time(NULL));

	float r= 120.40f, g = 120.6f, b = 120.20f;
		
	int h = 0;

	for (int y = 0; y < height; y++) {
		for (int x = 0; x < width; x++) {

			float total = totalNoisePerPoint(x, y);
			
			float color;

			color = (total * 128.0) + 128.0;//Convert to 0-256 values.
			if (color>255)
				color = 255;
			if (color<0)
				color = 0;
			
			perlinData[3 * (y * width + x) + 0] = r * color / 255.0f;
			perlinData[3 * (y * width + x) + 1] = g * color / 255.0f;
			perlinData[3 * (y * width + x) + 2] = b * color / 255.0f;

		}

	}


	SOIL_save_image("perlinNoise.bmp",
		SOIL_SAVE_TYPE_BMP,
		width, height,
		3,
		&perlinData[0]);
	
}





